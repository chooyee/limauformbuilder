const renderForm=(e,n)=>("container"==n["element-type"]&&n.components.forEach(n=>{n.formBuilderMode=!1;const o=createInstance(n.type,JSON.stringify(n)),t=o.renderDomElement();if(e.appendChild(t),"Column"===n["element-type"])for(let e=0;e<n.columns.length;e++)if(n.columns[e].components.length>0){let r=`col-${o.elementId}-${e}`,c=t.querySelector("#"+r);renderForm(c,n.columns[e])}}),e),createInstance=(classNameString,json)=>{var obj=new(eval(classNameString))(json);return obj},createElement=(e,n={})=>{const o=document.createElement(e);return this.appendAttr(o,n),o},appendAttr=(e,n={})=>{for(const[o,t]of Object.entries(n))e.setAttribute(o,t);return e};var socket=io();socket.on("connect",function(){console.log("Connected to Server")}),socket.on("newMessage",function(e){console.log(e)}),socket.on("newJson",async function(e){console.log(e);const n=document.querySelector(".container");n.innerHTML="";const o=await fetchJson(e.json);console.log(o),renderForm(n,o)}),socket.on("disconnect",function(){console.log("Disconnect from server")});const fetchJson=async e=>await fetch(e,{method:"GET",headers:{"Content-Type":"application/json; charset=utf-8"}}).then(e=>{if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);return e.json()}).catch(e=>{console.error("Error fetch json:",e)});document.addEventListener("DOMContentLoaded",async function(){const e=location.protocol+"//"+location.host+"/json/form.json",n=await fetchJson(e),o=document.querySelector(".container");renderForm(o,n)});